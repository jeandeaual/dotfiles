#!/bin/sh

{{ $archlinux := false -}}
{{- if eq .chezmoi.os "linux" -}}
{{-   if or (eq .chezmoi.osRelease.id "arch") (eq (index .chezmoi.osRelease "idLike") "arch") -}}
{{-     $archlinux = true -}}
{{-   end -}}
{{- end -}}

if [ -f "${HOME}/.shrc.local" ]; then
    # shellcheck disable=SC1091
    . "${HOME}/.shrc.local"
fi

if [ -f "${HOME}/.shrc.work" ]; then
    # shellcheck disable=SC1091
    . "${HOME}/.shrc.work"
fi

# Required for interactive use on dash
# shellcheck disable=SC3040
set -o | grep emacs >/dev/null 2>&1 && set -o emacs

# Environment variables
#------------------------------------------------------------------------------
export EDITOR='{{ .editor }}'
export VISUAL="${EDITOR}"
export SYSTEMD_EDITOR="${EDITOR}"
export FCEDIT="${EDITOR}"
export SVN_EDITOR="${EDITOR}"
if command -v ov >/dev/null; then
    export PAGER='ov'
    export PSQL_PAGER='ov -w=f -H2 -F -C -d "|"'
else
    export PAGER='less'
    export LESS='--tabs=4 --no-init --LONG-PROMPT --ignore-case --quit-if-one-screen --RAW-CONTROL-CHARS'
fi
export WWW_BROWSER='w3m'
export DOWNLOADER='wget -S'
if [ -f "${XDG_CONFIG_HOME:-${HOME}/.config}/ripgrep/ripgreprc" ]; then
    export RIPGREP_CONFIG_PATH="${XDG_CONFIG_HOME:-${HOME}/.config}/ripgrep/ripgreprc"
fi
{{- range $path := list "/usr/local/man" "${HOME}/.local/share/man" }}
if [ -d {{ quote $path }} ]; then
    export MANPATH="{{ $path }}${MANPATH:+:${MANPATH}}"
fi
{{- end }}
# Add ~/.local/bin to the PATH if it exists
if [ -d "${HOME}/.local/bin" ]; then
    export PATH="${HOME}/.local/bin${PATH:+:${PATH}}"
fi
# GPG
if command -v tty >/dev/null; then
    GPG_TTY="$(tty)"
    export GPG_TTY
fi
{{- if .embedded }}
# Raspberry Pi
if [ -d "/opt/vc/bin" ]; then
    export PATH="${PATH:+${PATH}:}/opt/vc/bin"
fi
{{- end }}
# Visual Studio Code devcontainer CLI
{{- if eq .chezmoi.os "darwin" }}
devcontainer_cli_path="${HOME}/Library/Application Support/Code/User/globalStorage/ms-vscode-remote.remote-containers/cli-bin"
{{- else }}
devcontainer_cli_path="${XDG_CONFIG_HOME:-${HOME}/.config}/Code/User/globalStorage/ms-vscode-remote.remote-containers/cli-bin"
{{- end }}
if [ -d "${devcontainer_cli_path}" ]; then
    export PATH="${PATH:+${PATH}:}${devcontainer_cli_path}"
fi

{{- if eq .chezmoi.os "darwin" }}

sbin_path="/usr/local/sbin"
if [ -d "${sbin_path}" ]; then
    export PATH="${PATH:+${PATH}:}${sbin_path}"
fi

{{-   if and (eq .chezmoi.arch "arm64") (lookPath "/opt/homebrew/bin/brew") }}{{/* Homebrew is installed under /opt/homebrew on Apple Silicon */}}

# https://docs.brew.sh/Installation#installation
eval "$(/opt/homebrew/bin/brew shellenv)"
{{-   else if lookPath "/usr/local/bin/brew" }}

# https://docs.brew.sh/Installation#installation
eval "$(/usr/local/bin/brew shellenv)"
{{-   end }}

# gcloud components
if [ -n "${BASH_VERSION}" ] || [ -n "${ZSH_VERSION}" ]; then
    gcloud_bin_path="${HOMEBREW_PREFIX}/share/google-cloud-sdk/bin"
    if [ -d "${gcloud_bin_path}" ]; then
        export PATH="${PATH:+${PATH}:}${gcloud_bin_path}"
    fi
fi

# asdf
# https://asdf-vm.com/guide/getting-started.html
asdf_inc_path="${HOMEBREW_PREFIX}/opt/asdf/libexec/asdf.sh"
if [ -f "${asdf_inc_path}" ]; then
    # shellcheck disable=SC1090
    . "${asdf_inc_path}"
fi

# GNU Make (installed via Homebrew)
gnubin_path="/usr/local/opt/make/libexec/gnubin"
if [ -d "${gnubin_path}" ]; then
    export PATH="${gnubin_path}${PATH:+:${PATH}}"
fi

# MySQL (installed via Homebrew)
mysql_cli_path="/usr/local/opt/mysql-client/bin"
if [ -d "${mysql_cli_path}" ]; then
    export PATH="${PATH:+${PATH}:}${mysql_cli_path}"
fi

# MacPorts
export PATH="/opt/local/bin:/opt/local/sbin${PATH:+:${PATH}}"
if [ -d "/opt/local/share/man" ]; then
    export MANPATH="/opt/local/share/man${MANPATH:+:${MANPATH}}"
fi

# Disable Homebrew telemetry
# https://docs.brew.sh/Analytics
export HOMEBREW_NO_ANALYTICS=1
{{- end }}

# Android build tools
{{- if eq .chezmoi.os "darwin" }}
android_build_tools_dir=~/Library/Android/sdk/build-tools
android_platform_tools_path=~/Library/Android/sdk/platform-tools
{{- else }}
android_build_tools_dir=~/Android/sdk/build-tools
android_platform_tools_path=~/Android/sdk/platform-tools
{{- end }}
if [ -d "${android_build_tools_dir}" ]; then
    for dir in "${android_build_tools_dir}"/*; do
        latest_build_tools_path="${dir}"
    done
    export PATH="${PATH:+${PATH}:}${latest_build_tools_path}"
fi
if [ -d "${android_platform_tools_path}" ]; then
    export PATH="${PATH:+${PATH}:}${android_platform_tools_path}"
fi

# Aliases & functions
#------------------------------------------------------------------------------
{{- if eq .chezmoi.os "darwin" }}
alias o='open'
{{- else }}
if command -v xdg-open >/dev/null; then
    alias o='xdg-open'
fi
{{- end }}
if command -v kubectl >/dev/null; then
    alias k=kubectl

    # Decode a Kubernetes secret
    # shellcheck disable=SC2154
    alias kgetsecret='kubectl get secret -o go-template='\''{{ "{{" }}range $k,$v := .data}}{{ "{{" }}printf "%s: " $k}}{{ "{{" }}if not $v}}{{ "{{" }}$v}}{{ "{{" }}else}}{{ "{{" }}$v | base64decode}}{{ "{{" }}end}}{{ "{{" }}"\n"}}{{ "{{" }}end}}'\'''

    # Force delete a namespace by removing its finalizer and calling the Kubernetes API
    kforcedeletens() {
        if [ $# -lt 1 ]; then
            echo "usage: kforcedeletens NAMESPACE" 1>&2
            return 1
        fi

        namespace=$1

        kubectl proxy >/dev/null 2>&1 &

        kubectl get namespace "${namespace}" -o json |
            jq '.spec = {"finalizers":[]}' |
            curl -k -H "Content-Type: application/json" -X PUT --data-binary @- "127.0.0.1:8001/api/v1/namespaces/${namespace}/finalize"

        kill $!
    }

    # Delete all evicted Pods
    kdeleteevicted() {
        kubectl "$@" get pods --field-selector=status.phase==Failed -o jsonpath='{range .items[*]}{.metadata.name}{" "}{.status.reason}{"\n"}{end}' | grep 'Evicted$' | cut -d' ' -f1 | xargs kubectl "$@" delete pod
    }
fi
{{- if eq .chezmoi.os "linux" }}
openport() {
    LOW_BOUND=$1
    UPPER_BOUND=$2
    comm -23 <(seq ${LOW_BOUND} ${UPPER_BOUND} | sort) <(ss -Htan | awk '{print $4}' | cut -d':' -f2 | sort -u) | shuf | head -n 1
}
{{- end }}
if command -v helm >/dev/null; then
    alias h=helm
fi
if command -v docker >/dev/null; then
    alias d=docker
fi
if command -v podman >/dev/null; then
    alias p=podman
fi
alias cp='cp -v'
alias mv='mv -v'
alias rm='rm -v'
if command -v exa >/dev/null; then
    alias ls='exa --group-directories-first'
    alias la='ls -a'
    alias ll='ls --git -al'

    tree_ignore="cache|log|logs|node_modules|vendor|__pycache__"

    # shellcheck disable=SC2139
    alias lt="ls --tree -D -L 2 -I '${tree_ignore}'"
    # shellcheck disable=SC2139
    alias ltt="ls --tree -D -L 3 -I '${tree_ignore}'"
    # shellcheck disable=SC2139
    alias lttt="ls --tree -D -L 4 -I '${tree_ignore}'"
    # shellcheck disable=SC2139
    alias ltttt="ls --tree -D -L 5 -I '${tree_ignore}'"
else
{{- if eq .chezmoi.os "darwin" }}
    alias ls='ls -G'
{{- else }}
    alias ls='ls --color=auto --group-directories-first'
{{- end }}
    alias ll='ls -Alh'
fi
alias du='du -h'
alias df='df -Th'
alias gzip='gzip -v9N'
alias zip='zip -9 -r'
alias 7za='7z a -t7z -mx=9 -mfb=273 -ms -md=31 -myx=9 -mtm=- -mmt -mmtf -md=1536m -mmf=bt3 -mmc=10000 -mpb=0 -mlc=0'
alias j='jobs -l'
# Show which process is using which port
alias ports='sudo lsof +M -i4 -n -P'
# Force tmux to assume the terminal supports 256 colours
alias tmux='tmux -2'
alias em='emacs'
if command -v emacsclient >/dev/null; then
    # Open a new Emacs frame
    alias emc='emacsclient -n -c -a ""'
    # Open an Emacs frame in the current TTY
    alias emw='emacsclient -n -w -a ""'
fi
# Get the external IP address
alias wip='dig -4 +short myip.opendns.com A @resolver1.opendns.com'
# alias wip='dig -4 +short o-o.myaddr.l.google.com TXT @ns1.google.com | cut -d '\''"'\'' -f 2'
alias wip6='dig -6 +short myip.opendns.com AAAA @resolver1.ipv6-sandbox.opendns.com'
# alias wip6='dig -6 +short o-o.myaddr.l.google.com TXT @ns1.google.com | cut -d '\''"'\'' -f 2'
# Delete all executables from the current directory
alias rmbin='find . -maxdepth 1 -perm /111 -type f -exec rm -v {} \;'
{{- if ne .chezmoi.os "darwin" }}
# Find all the .desktop files installed on the system
alias finddesktop='find {/usr/{,local/},${HOME}/.local/}share/applications -type f 2>/dev/null'
{{- end }}
{{- if and (ne .chezmoi.os "windows") (ne .chezmoi.os "darwin") (ne .chezmoi.os "android") (not .wsl) }}
# Ask GNOME Shell to restart itself through dbus
if command -v dbus-send >/dev/null; then
    alias restartgnome="dbus-send --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'global.reexec_self()'"
fi
{{- end }}
{{- if ne .chezmoi.os "darwin" }}
# Mimic the OS X commands
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'
if command -v xclip >/dev/null && command -v qrencode >/dev/null; then
    # Show a QR code with the clipboard's content
    alias qr='xclip -selection clipboard -o | qrencode --size=10 -o - | feh -'
fi
if command -v ip >/dev/null; then
    alias ips='for gw in $(ip route list to 0/0 | awk '"'"'{print $3}'"'"'); do ip route get to "${gw}" | awk '"'"'/src/ {print $5}'"'"'; done'
fi
{{- end }}
if command -v brew >/dev/null; then
    alias brewu='brew update && brew upgrade'
    alias brewua='brew update && brew upgrade && brew upgrade --casks --greedy-auto-updates'
fi
#alias 2bfp='yt-dlp -v -ciw -o "%(title)s.%(ext)s" --merge-output-format mkv --playlist-end 5 ytuser:TheSw1tcher'
# Mozc aliases
if command -v /usr/lib/mozc/mozc_tool >/dev/null; then
    alias mozc-config='/usr/lib/mozc/mozc_tool --mode=config_dialog'
    alias mozc-pad='/usr/lib/mozc/mozc_tool --mode=hand_writing'
    alias mozc-register='/usr/lib/mozc/mozc_tool --mode=word_register_dialog'
    alias mozc-dict='/usr/lib/mozc/mozc_tool --mode=dictionary_tool'
fi
{{- if eq .chezmoi.os "darwin" }}
# Make cal display the week numbers
alias cal='ncal -w'
{{- /* ArchLinux already includes a cal utility with Monday as the start of the week */ -}}
{{- else if not $archlinux }}
# Make cal display the week numbers and Monday as the start of the week
alias cal='ncal -bM -w'
{{- end }}
# List zombie processes
# shellcheck disable=SC2142
alias zombie='ps -eo state,ppid | awk '\''/^Z/ {print $2}'\'' | xargs -r ps -f {{ if eq .chezmoi.os "linux" }}--ppid{{ else }}-o ppid{{ end }}'
# Current UNIX timestamp in seconds
alias ts='date +%s'
{{- if or (eq .chezmoi.os "linux") (eq .chezmoi.os "android") }}
# Current UNIX timestamp in milliseconds
alias tsms='date +%s%N | cut -b1-13'
# alias tsms='echo $(($(date +%s%N)/1000000))'
# Current UNIX timestamp in nanoseconds
alias tsns='date +%s%N'
{{- end }}
{{- if eq .chezmoi.os "darwin" }}
# Flush the macOS DNS cache
alias flushdns='sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder'
{{- end }}
# AWS
if command -v aws >/dev/null; then
    # List the AWS Lambda functions
    if command -v yq >/dev/null && ! command -v jq >/dev/null; then
        alias lambdalist="aws --output yaml lambda list-functions | yq '.Functions[].FunctionName'"
    else
        alias lambdalist="aws --output json lambda list-functions | jq -r '.Functions[].FunctionName'"
    fi
fi
# Python
alias activate='source ./venv/bin/activate'
if command -v yq >/dev/null && ! command -v jq >/dev/null; then
    alias pipenv2requirements="yq '.default | to_entries | .[] | .key + .value.version' Pipfile.lock"
else
    alias pipenv2requirements="jq -r '.default | to_entries[] | .key + .value.version' Pipfile.lock"
fi
# PlantUML
if command -v plantuml >/dev/null; then
    # Generate a SVG file using PlantUML
    alias plantuml-svg='plantuml -tsvg'
    # Generate a PNG file with a DPI of 300 using PlantUML
    alias plantuml-png='plantuml -tpng -Sdpi=300'
    # Generate a PDF file using PlantUML
    alias plantuml-pdf='plantuml -tpdf'
    plantuml_files() {
        find . -type f \
            -not -path '*/\.git/*' \
            -not -path 'node_modules' \
            -not -path '*/\.DS_Store' \
            -print | \
        sort | \
        sed -e 's/^\.\.*//' -e '1s/^/@startfiles\n/' -e '$s/$/\n@endfiles/' | \
        plantuml -pipe > diagram.png
    }
    alias plantuml-files='plantuml_files'
fi
# DBus
if command -v dbus-send >/dev/null; then
    # Get the PID of the currently running DBus Secret Service daemon
    alias secretservicepid='dbus-send --session --print-reply=literal --dest=org.freedesktop.DBus / org.freedesktop.DBus.GetConnectionUnixProcessID string:org.freedesktop.secrets'
    # Display the QuodLibet play time
    # shellcheck disable=SC2142
    alias quodplaytime='dbus-send --session --print-reply=literal --dest=net.sacredchao.QuodLibet /net/sacredchao/QuodLibet net.sacredchao.QuodLibet.GetPosition | awk '\''{print $2 / 1000}'\'''
fi
# SSH key generation
if command -v ssh-keygen >/dev/null; then
    alias ssh-keygen-rsa='ssh-keygen -t rsa -b 4096'
    alias ssh-keygen-ed25519='ssh-keygen -t ed25519'
fi
if command -v flac >/dev/null; then
    # Reencode FLAC files in the current directory with the highest compression settings
    alias flacreencodef="find . -type f -name '*.flac' -exec flac --verify --best --decode-through-errors --preserve-modtime -e -p -f {} \;"

    if command -v metaflac >/dev/null; then
        # Reencode FLAC files in the current directory with the highest compression settings if it was encoded with a different version of FLAC
        # shellcheck disable=SC2142,SC2154
        alias flacreencode='find . -type f -name '\''*.flac'\'' -exec sh -c '\''vendor="$(metaflac --show-vendor-tag $1)"; current_vendor="libFLAC $(flac --version | cut -d" " -f 2)"; [ "${vendor#*$current_vendor}" != "$vendor" ] || flac --verify --best --decode-through-errors --preserve-modtime -e -p -f $1'\'' _ {} \;'
    fi
fi
{{ range $i, $cmd := list "mkvmerge" "ffmpeg" }}
{{ if eq $i 0 }}if{{ else }}elif{{ end }} command -v {{ $cmd }} >/dev/null; then
    # Remux MTS and M2TS files to MKV
    mpeg2mkv() {
        clean=false
        if [ $# -ge 1 ]; then
            clean=$1
            shift
        fi

        # shellcheck disable=SC2016
        script='file=$1
            shift
            clean=$2
            shift

            mkv="${1%.*}.mkv"

{{ if eq $cmd "mkvmerge" }}
            mkvmerge -o "${mkv}" "$file"
{{- else if eq $cmd "ffmpeg" }}
            ffmpeg -i "$file" -scodec copy -acodec copy -vcodec copy -f matroska "${mkv}"
{{- end }}

            if [ "${clean}" = "true" ]; then
                rm -f "$file"
            fi

            if command -v mkclean >/dev/null; then
                clean_mkv="${1%.*}.clean.mkv"

                mkclean "${mkv}" "${clean_mkv}" && rm -f "${mkv}" && mv "${clean_mkv}" "${mkv}"
            fi'

        find . -type f \( -name '*.ts' -o -name '*.m2t' -o -name '*.m2ts' \) -exec sh -c "${script}" "${clean}" - {} \;
    }
{{- end }}
fi
if command -v pwsh >/dev/null; then
    # Start PowerShell without displaying the copyright banner
    alias pwsh='pwsh -NoLogo'
fi
{{- if $archlinux }}
if command -v paru >/dev/null; then
    # Call paru while skipping checksums and PGP checks
    alias paruignore='paru --mflags "--skipchecksums --skippgpcheck"'
fi
{{- end }}

{{- if .steamos }}

# SteamOS
alias vim="flatpak run org.vim.Vim"
alias vi="vim"
alias gvim="flatpak run org.vim.Vim -g"
alias nvim="flatpak run io.neovim.nvim"
alias code="flatpak run com.visualstudio.code"

if [ -d "${HOME}/.local/podman/bin" ]; then
    export PATH="${HOME}/.local/podman/bin${PATH:+:${PATH}}"
fi
{{- end }}

# Create a directory and enter it
# Usage: mkcd DIR
mkcd() {
    mkdir -p -- "$1" && cd -P -- "$1" || return
}

if command -v chezmoi >/dev/null; then
    # Change the working directory to the chezmoi directory without creating a subshell
    chezmoicd() {
        cd "$(chezmoi source-path)" || return
    }
fi

# Check if a JPEG-XL file was losslessly created from a JPEG file
jxl_is_lossless_jpeg() {
    if [ ! -f "$1" ] || ! echo "$1" | grep -q '.jxl$'; then
        echo "The argument needs to be a JPEG-XL file" 1>&2
        return 1
    fi

    # https://github.com/libjxl/libjxl/blob/main/doc/format_overview.md#jpeg-bitstream-reconstruction-data
    head -c 64 "$1" | grep -q jbrd
}

{{- range list "docker" "podman" }}

if command -v {{ . }} >/dev/null; then
    # Cleanup {{ . | title }} dangling images, exited containers, unused networks and build cache
    {{ . }}cleanup() {
        {{ . }} system prune -f
    }

    # Delete all {{ . | title }} images, containers, networks, volumes and build cache
    {{ . }}nuke() {
        for container in $({{ . }} ps -a -q); do
            {{ . }} rm -f "${container}"
        done

        {{ . }} system prune -a --volumes -f
    }
fi
{{- end }}

# Increment a version number
# Usage:
# echo "1.2.3" | inc_version 3
# 1.2.4
# echo "1.2.3" | inc_version 2
# 1.3.0
# echo "1.2.3" | inc_version 1
# 2.0.0
inc_version() {
    awk -F. -vOFS=. '{ $ver++; while(ver++<NF) $ver=0; print $0 }' ver="$1"
}

# Write an ISO image to a device
write_iso() {
    if [ $# -ne 2 ]; then
        echo "usage: write_iso ISO DEVICE"
        return 1
    fi
    if [ ! -f "$1" ] || ! echo "$1" | grep -q '.iso$'; then
        echo "The first argument needs to be an ISO file" 1>&2
        return 1
    fi
    if [ ! -e "$2" ] || ! echo "$2" | grep -q '^/dev/sd'; then
        echo "The second argument needs to be a device" 1>&2
        return 1
    fi

    sudo dd if="$1" of="$2" bs=4{{ if eq .chezmoi.os "linux" }}M{{ else }}m{{ end }} conv=fdatasync status=progress
}

# Remove .DS_Store and ._ AppleDouble files recursively in a directory
rmmacdotfiles() {
{{- if eq .chezmoi.os "darwin" }}
    dot_clean -m "${@:-.}"
{{- else }}
    find "${@:-.}" -type f \( -name '.DS_Store' -o -name '._*' \) -delete
{{- end }}
}

if command -v tsh >/dev/null; then
    tshl() {
        if [ -n "${TELEPORT_PROXY}" ] && \
           [ -n "${TELEPORT_USER}" ] && \
           [ ! -f "${HOME}/.tsh/$(echo "$TELEPORT_PROXY" | cut -d':' -f 1).yaml" ]; then
            tsh login
        fi

        tsh kube login --all
    }
fi

if command -v git >/dev/null; then
    # Make a Git commit with a specific date
    # e.g. gitc -9 hours -m "This is a commit"
    gitc() {
        if [ $# -lt 3 ]; then
            echo "usage: gitc DIFF UNIT ARGS" 1>&2
            return 1
        fi

        diff=$1
        shift
        unit=$1
        shift
{{- if or (eq .chezmoi.os "linux") (eq .chezmoi.os "windows") (eq .chezmoi.os "android") }}
        if [ "${diff%"${diff#?}"}" = "-" ]; then
            date="$(LC_ALL=C date -d "${diff#-} ${unit} ago")"
        else
            date="$(LC_ALL=C date -d "${diff} ${unit}")"
        fi
{{- else }}
        case "${unit}" in
            second|seconds)
                unit="S"
                ;;
            minute|minutes)
                unit="M"
                ;;
            hour|hours)
                unit="H"
                ;;
            day|days)
                unit="d"
                ;;
            week|weeks)
                unit="w"
                ;;
            month|months)
                unit="m"
                ;;
            year|years)
                unit="y"
                ;;
            *)
                echo "usage: gitc DIFF UNIT ARGS" 1>&2
                return 1
        esac

        if [ "${diff%"${diff#?}"}" != "-" ]; then
            diff="+${diff}"
        fi

        date="$(LC_ALL=C date -v"${diff}${unit}")"
{{- end }}

        amend=false
        for arg in "$@"; do
            if [ "${arg}" = "--amend" ]; then
                amend=true
            fi
        done

        if [ "${amend}" = true ]; then
            # When amending a commit, GIT_AUTHOR_DATE is ignored in favor of the --date option
            GIT_COMMITTER_DATE="${date}" git commit --date "${date}" "$@"
        else
            GIT_AUTHOR_DATE="${date}" GIT_COMMITTER_DATE="${date}" git commit "$@"
        fi
    }
fi

# CentOS only
# Use Vim with system clipboard support if installed
if [ -e /usr/bin/vimx ] && [ ! -e /usr/local/bin/vim ]; then
    alias vim='/usr/bin/vimx'
fi

# Haskell
#------------------------------------------------------------------------------
if [ -d "${HOME}/.cabal/bin" ]; then
    export PATH="${HOME}/.cabal/bin${PATH:+:${PATH}}"
fi
if command -v ghc >/dev/null; then
    alias ghc-sandbox="ghc -no-user-package-db -package-db .cabal-sandbox/*-packages.conf.d"
fi
if command -v ghci >/dev/null; then
    alias ghci-sandbox="ghci -no-user-package-db -package-db .cabal-sandbox/*-packages.conf.d"
fi
if command -v runhaskell >/dev/null; then
    alias runhaskell-sandbox="runhaskell -no-user-package-db -package-db .cabal-sandbox/*-packages.conf.d"
fi

# Go
#------------------------------------------------------------------------------
if command -v go >/dev/null; then
    # go build and strip the debugging information (DWARF tables)
    alias gor="go build -ldflags='-s -w'"

    if _gopath=$(go env GOPATH 2>/dev/null); then
        export PATH="${_gopath}/bin${PATH:+:${PATH}}"
    fi
fi
# shellcheck disable=SC1091
[ -s "${HOME}/.gvm/scripts/gvm" ] && . "${HOME}/.gvm/scripts/gvm"

# Rust
#------------------------------------------------------------------------------
if command -v rustup >/dev/null; then
    alias rustbook="rustup docs --book"
fi
if [ -d "${HOME}/.cargo/bin" ]; then
    export PATH="${HOME}/.cargo/bin${PATH:+:${PATH}}"
fi
# shellcheck disable=SC1091
[ -s "${HOME}/.cargo/env" ] && . "${HOME}/.cargo/env"

# Ruby
#------------------------------------------------------------------------------
if [ -d "${HOME}/.rvm/bin" ]; then
    export PATH="${HOME}/.rvm/bin${PATH:+:${PATH}}"
fi

if command -v rbenv >/dev/null; then
    if [ -n "${BASH_VERSION}" ] || [ -n "${ZSH_VERSION}" ]; then
        eval "$(rbenv init - sh)"
    fi
fi

# Node
#------------------------------------------------------------------------------
export NVM_DIR="${HOME}/.nvm"
{{- if eq .chezmoi.os "darwin" }}
nvm_install_dir="$(brew --prefix nvm 2>/dev/null)"
if [ -n "${nvm_install_dir}" ]; then
    # shellcheck disable=SC1091
    [ -s "${nvm_install_dir}/nvm.sh" ] && . "${nvm_install_dir}/nvm.sh"
    # shellcheck disable=SC1091
    [ -s "${nvm_install_dir}/etc/bash_completion.d/nvm" ] && . "${nvm_install_dir}/etc/bash_completion.d/nvm"
fi
{{- else if $archlinux }}
# shellcheck disable=SC1091
[ -s "/usr/share/nvm/init-nvm.sh" ] && . "/usr/share/nvm/init-nvm.sh"
{{- else }}{{- /* Install via https://raw.githubusercontent.com/nvm-sh/nvm/vX.X.X/install.sh */ -}}
# shellcheck disable=SC1091
[ -s "${NVM_DIR}/nvm.sh" ] && . "${NVM_DIR}/nvm.sh"
# shellcheck disable=SC1091
[ -s "${NVM_DIR}/bash_completion" ] && . "${NVM_DIR}/bash_completion"
{{- end }}

# Prompt
# Bash default: PS1='\h:\W \u\$ '
# ash default: PS1='\w \$ '
if [ -n "${BASH_VERSION}" ] || [ -n "${ZSH_VERSION}" ]; then
    export PS1='\[\033[01;32m\]\u\[\033[00m\]\[\033[01;m\]@\[\033[01;34m\]\h\[\033[00m\] \[\033[01;33m\]\w\[\033[00m\] \$ '
else
    export PS1='\u@\h \w \$ '
fi
