{{- $archlinux := false -}}
{{- if eq .chezmoi.os "linux" -}}
{{-   if or (eq .chezmoi.osRelease.id "arch") (eq (index .chezmoi.osRelease "idLike") "arch") -}}
{{-     $archlinux = true -}}
{{-   end -}}
{{- end -}}

use re
use readline-binding
use path
use str
use epm

{{- if ne .chezmoi.os "windows" }}{{/* Modules don't work on Windows */}}

epm:install &silent-if-installed ^
  github.com/zzamboni/elvish-modules
{{- end }}

{{- if eq .chezmoi.os "darwin" }}

use github.com/zzamboni/elvish-modules/iterm2

iterm2:init
set edit:insert:binding[Ctrl-l] = $iterm2:clear-screen~
{{- end }}

use interactive

# Arrange for [Alt-e] and [Meta-e] to edit the current command buffer using the
# prefered external editor
set edit:insert:binding[Alt-e] = $interactive:external_edit_command~
set edit:insert:binding[Meta-e] = $interactive:external_edit_command~

{{- if ne .chezmoi.os "windows" }}{{/* Modules don't work on Windows */}}

# Make cd - work in Elvish
edit:add-var cd~ $interactive:cd~
{{- end }}

try {
  use work
  edit:add-var airis-mysql-proxy~ $work:airis-mysql-proxy~
  edit:add-var aws~ $work:aws~
  edit:add-var hlogin~ $work:hlogin~
  edit:add-var step~ $work:step~
  edit:add-var airis-create-superuser~ $work:airis-create-superuser~
  edit:add-var airis-token~ $work:airis-token~
} catch _ {
  # The work module might not be available on some machines
}

var config_path = $E:HOME'/.config'
if (not-eq $E:XDG_CONFIG_HOME '') {
  set config_path = $E:XDG_CONFIG_HOME
}

# Environment variables
#------------------------------------------------------------------------------
set E:EDITOR = '{{ .editor }}'
set E:VISUAL = $E:EDITOR
set E:SYSTEMD_EDITOR = $E:EDITOR
set E:FCEDIT = $E:EDITOR
set E:SVN_EDITOR = $E:EDITOR
if (has-external ov) {
  set E:PAGER = 'ov'
  set E:PSQL_PAGER = 'ov -w=f -H2 -F -C -d "|"'
} else {
  set E:PAGER = 'less'
  set E:LESS = '--tabs=4 --no-init --LONG-PROMPT --ignore-case --quit-if-one-screen --RAW-CONTROL-CHARS'
}
set E:WWW_BROWSER = 'w3m'
set E:DOWNLOADER = 'wget -S'
if (path:is-regular &follow-symlink=$true $config_path'/ripgrep/ripgreprc') {
  set E:RIPGREP_CONFIG_PATH = $config_path'/ripgrep/ripgreprc'
}
{{- range $path := list "/usr/local/man" "$E:HOME'/.local/share/man'" }}
if (path:is-dir {{ $path }}) {
  if (eq E:MANPATH '') {
    set E:MANPATH = {{ $path }}
  } else {
    set E:MANPATH = (str:join ':' [{{ $path }} $E:MANPATH])
  }
}
{{- end }}
# Add ~/.local/bin to the PATH if it exists
if (path:is-dir $E:HOME'/.local/bin') {
  set paths = [$E:HOME'/.local/bin' $@paths]
}
# GPG
if (has-external tty) {
  set E:GPG_TTY = (tty)
}
# Raspberry Pi
{{- if .embedded }}
if (path:is-dir /opt/vc/bin) {
  set paths = [$@paths /opt/vc/bin]
}
{{- end }}
# Visual Studio Code devcontainer CLI
{{- if eq .chezmoi.os "darwin" }}
var devcontainer_cli_path = $E:HOME'/Library/Application Support/Code/User/globalStorage/ms-vscode-remote.remote-containers/cli-bin'
{{- else if eq .chezmoi.os "windows" }}
var devcontainer_cli_path = $E:APPDATA'/Code/User/globalStorage/ms-vscode-remote.remote-containers/cli-bin'
{{- else }}
var devcontainer_cli_path = $config_path'/Code/User/globalStorage/ms-vscode-remote.remote-containers/cli-bin'
{{- end }}
if (path:is-dir $devcontainer_cli_path) {
  set paths = [$@paths $devcontainer_cli_path]
}

{{- if eq .chezmoi.os "darwin" }}

var sbin_path = '/usr/local/sbin'
if (path:is-dir $sbin_path) {
  set paths = [$@paths $sbin_path]
}

{{- $homebrew := false }}
{{-   if and (eq .chezmoi.arch "arm64") (lookPath "/opt/homebrew/bin/brew") }}{{/* Homebrew is installed under /opt/homebrew on Apple Silicon */}}
{{-     $homebrew = true }}
# https://docs.brew.sh/Installation#installation
set E:HOMEBREW_PREFIX = /opt/homebrew
{{-   else if lookPath "/usr/local/bin/brew" }}
{{-     $homebrew = true }}

# https://docs.brew.sh/Installation#installation
set E:HOMEBREW_PREFIX = /usr/local
{{-   end }}
{{-   if $homebrew }}
{{- /* Port of https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/shellenv.sh for Elvish */}}
set E:HOMEBREW_CELLAR = $E:HOMEBREW_PREFIX'/Cellar'
set E:HOMEBREW_REPOSITORY = $E:HOMEBREW_PREFIX
set paths = [$E:HOMEBREW_PREFIX'/bin' $E:HOMEBREW_PREFIX'/sbin' $@paths]
if (eq E:MANPATH '') {
  set E:MANPATH = $E:HOMEBREW_PREFIX'/share/man'
} else {
  set E:MANPATH = (str:join ':' [$E:HOMEBREW_PREFIX'/share/man' $E:MANPATH])
}
if (eq E:INFOPATH '') {
  set E:INFOPATH = $E:HOMEBREW_PREFIX'/share/info'
} else {
  set E:INFOPATH = (str:join ':' [$E:HOMEBREW_PREFIX'/share/info' $E:INFOPATH])
}

{{-   end }}

# gcloud components
var gcloud_bin_path = $E:HOMEBREW_PREFIX'/share/google-cloud-sdk/bin'
if (path:is-dir $gcloud_bin_path) {
  set paths = [$@paths $gcloud_bin_path]
}

# asdf
# https://asdf-vm.com/guide/getting-started.html
use asdf _asdf; var asdf~ = $_asdf:asdf~
set edit:completion:arg-completer[asdf] = $_asdf:arg-completer~

# GNU Make (installed via Homebrew)
var gnubin_path = /usr/local/opt/make/libexec/gnubin
if (path:is-dir $gnubin_path) {
  set paths = [$gnubin_path $@paths]
}
# MySQL (installed via Homebrew)
var mysql_cli_path = /usr/local/opt/mysql-client/bin
if (path:is-dir $mysql_cli_path) {
  set paths = [$@paths $mysql_cli_path]
}
# MacPorts
set paths = [/opt/local/bin /opt/local/sbin $@paths]
if (path:is-dir /opt/local/share/man) {
  if (eq E:MANPATH '') {
    set E:MANPATH = /opt/local/share/man
  } else {
    set E:MANPATH = (str:join ':' [/opt/local/share/man $E:MANPATH])
  }
}

# Disable Homebrew telemetry
# https://docs.brew.sh/Analytics
set E:HOMEBREW_NO_ANALYTICS = 1
{{- end }}

# Android build tools
{{- if eq .chezmoi.os "windows" }}
put $E:LOCALAPPDATA'/Android/sdk/build-tools/'*[nomatch-ok][type:dir] | order &reverse=$true | take 1 | each {|folder| set paths = [$@paths $folder] }
var android_platform_tools_path = $E:LOCALAPPDATA'/Android/sdk/platform-tools'
{{- else if eq .chezmoi.os "darwin" }}
put ~/Library/Android/sdk/build-tools/*[nomatch-ok][type:dir] | order &reverse=$true | take 1 | each {|folder| set paths = [$@paths $folder] }
var android_platform_tools_path = ~/Library/Android/sdk/platform-tools
{{- else }}
put ~/Android/sdk/build-tools/*[nomatch-ok][type:dir] | order &reverse=$true | take 1 | each {|folder| set paths = [$@paths $folder] }
var android_platform_tools_path = ~/Android/sdk/platform-tools
{{- end }}
if (path:is-dir $android_platform_tools_path) {
  set paths = [$@paths $android_platform_tools_path]
}

# Aliases
#------------------------------------------------------------------------------
{{- if eq .chezmoi.os "darwin" }}
fn o {|@a| open $@a }
{{- else }}
if (has-external xdg-open) {
  fn o {|@a| xdg-open $@a }
  edit:add-var o~ $o~
}
{{- end }}
if (has-external kubectl) {
  fn k {|@a| kubectl $@a }
  edit:add-var k~ $k~

  # Decode a Kubernetes secret
  fn kgetsecret {|@a| kubectl get secret -o go-template='{{ "{{" }}range $k,$v := .data}}{{ "{{" }}printf "%s: " $k}}{{ "{{" }}if not $v}}{{ "{{" }}$v}}{{ "{{" }}else}}{{ "{{" }}$v | base64decode}}{{ "{{" }}end}}{{ "{{" }}"\n"}}{{ "{{" }}end}}' $@a }
  edit:add-var kgetsecret~ $kgetsecret~

  # Delete all evicted Pods
  fn kdeleteevicted {|@a|
    kubectl $@a get pods --field-selector=status.phase==Failed -o jsonpath='{range .items[*]}{.metadata.name}{" "}{.status.reason}{"\n"}{end}' | each {|pod_status|
      if (re:match 'Evicted$' $pod_status) {
        put (str:split ' ' $pod_status) | take 1
      }
    } | each {|pod|
      kubectl $@a delete pod $pod
    }
  }
  edit:add-var kdeleteevicted~ $kdeleteevicted~
}
if (has-external helm) {
  fn h {|@a| helm $@a }
  edit:add-var h~ $h~
}
if (has-external docker) {
  fn d {|@a| docker $@a }
  edit:add-var d~ $d~
}
if (has-external podman) {
  fn p {|@a| podman $@a }
  edit:add-var p~ $p~
}
fn cp {|@a| e:cp -v $@a }
fn mv {|@a| e:mv -v $@a }
fn rm {|@a| e:rm -v $@a }
if (has-external exa) {
  fn ls {|@a| exa --group-directories-first $@a }
  edit:add-var ls~ $ls~
  fn la {|@a| ls -a $@a }
  edit:add-var la~ $la~
  fn ll {|@a| ls --git -al $@a }
  edit:add-var ll~ $ll~

  var tree_ignore = 'cache|log|logs|node_modules|vendor|__pycache__'

  fn lt {|@a| ls --tree -D -L 2 -I $tree_ignore $@a }
  edit:add-var lt~ $lt~
  fn ltt {|@a| ls --tree -D -L 3 -I $tree_ignore $@a }
  edit:add-var ltt~ $ltt~
  fn lttt {|@a| ls --tree -D -L 4 -I $tree_ignore $@a }
  edit:add-var lttt~ $lttt~
  fn ltttt {|@a| ls --tree -D -L 5 -I $tree_ignore $@a }
  edit:add-var ltttt~ $ltttt~
} else {
{{- if eq .chezmoi.os "darwin" }}
  fn ls {|@a| e:ls -G $@a }
  edit:add-var ls~ $ls~
{{- else }}
  fn ls {|@a| e:ls --color=auto --group-directories-first $@a }
  edit:add-var ls~ $ls~
{{- end }}
  fn ll {|@a| e:ls -Alh $@a }
  edit:add-var ll~ $ll~
}
fn du {|@a| e:du -h $@a }
fn df {|@a| e:df -Th $@a }
fn gzip {|@a| e:gzip -v9N $@a }
fn zip {|@a| e:zip -9 -r $@a }
fn 7za {|@a| 7z a -t7z -mx=9 -mfb=273 -ms -md=31 -myx=9 -mtm=- -mmt -mmtf -md=1536m -mmf=bt3 -mmc=10000 -mpb=0 -mlc=0 $@a }
fn j {|@a| jobs -l $@a }
# Show which process is using which port
fn ports { sudo lsof +M -i4 -n -P }
# Force tmux to assume the terminal supports 256 colours
fn tmux {|@a| e:tmux -2 $@a }
fn em {|@a| emacs $@a }
if (has-external emacsclient) {
  # Open a new Emacs frame
  fn emc {|@a| emacsclient -n -c -a "" $@a }
  edit:add-var emc~ $emc~
  # Open an Emacs frame in the current TTY
  fn emw {|@a| emacsclient -n -w -a "" $@a }
  edit:add-var emw~ $emw~
}

# Get the external IP address
fn wip {
  dig -4 +short myip.opendns.com A @resolver1.opendns.com
  # dig -4 +short o-o.myaddr.l.google.com TXT @ns1.google.com | str:split '"' | drop 1 | take 1
}
fn wip6 {
  dig -6 +short myip.opendns.com AAAA @resolver1.ipv6-sandbox.opendns.com
  # dig -6 +short o-o.myaddr.l.google.com TXT @ns1.google.com | str:split '"' | drop 1 | take 1
}
# Delete all executables from the current directory
fn rmbin { find . -maxdepth 1 -perm /111 -type f -exec rm -v '{}' ';' }
{{- if and (ne .chezmoi.os "windows") (ne .chezmoi.os "darwin") }}
# Find all the .desktop files installed on the system
fn finddesktop { try { find {/usr/{,local/},$E:HOME/.local/}share/applications -type f 2>/dev/null } catch _ { } }
{{- end }}
{{- if and (ne .chezmoi.os "windows") (ne .chezmoi.os "darwin") (ne .chezmoi.os "android") (not .wsl) }}
# Ask GNOME Shell to restart itself through dbus
if (has-external dbus-send) {
  fn restartgnome { dbus-send --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'global.reexec_self()' }
  edit:add-var restartgnome~ $restartgnome~
}
{{- end }}
{{- if ne .chezmoi.os "darwin" }}
# Mimic the OS X commands
fn pbcopy { xclip -selection clipboard }
fn pbpaste { xclip -selection clipboard -o }
# Show a QR code with the clipboard's content
if (and (has-external xclip) (has-external qrencode) (has-external feh)) {
  fn qr { xclip -selection clipboard -o | qrencode --size=10 -o - | feh - }
  edit:add-var qr~ $qr~
}
if (has-external ip) {
  fn ips {
    ip route list to 0/0 | awk '{print $3}' | each {|gw|
      ip route get to $gw | awk '/src/ {print $5}'
    }
  }
  edit:add-var ips~ $ips~
}
{{- end }}
if (has-external brew) {
  fn brewu {
    and (brew update) (brew upgrade)
  }
  edit:add-var brewu~ $brewu~

  fn brewua {
    and (brew update) (brew upgrade) (brew upgrade --casks --greedy-auto-updates)
  }
  edit:add-var brewua~ $brewua~
}
# Mozc aliases
if (has-external /usr/lib/mozc/mozc_tool) {
  fn mozc-config { /usr/lib/mozc/mozc_tool --mode=config_dialog }
  edit:add-var mozc-config~ $mozc-config~

  fn mozc-pad { /usr/lib/mozc/mozc_tool --mode=hand_writing }
  edit:add-var mozc-pad~ $mozc-pad~

  fn mozc-register { /usr/lib/mozc/mozc_tool --mode=word_register_dialog }
  edit:add-var mozc-register~ $mozc-register~

  fn mozc-dict { /usr/lib/mozc/mozc_tool --mode=dictionary_tool }
  edit:add-var mozc-dict~ $mozc-dict~
}
{{- if eq .chezmoi.os "darwin" }}
# Make cal display the week numbers
fn cal {|@a| ncal -w $@a }
{{- /* ArchLinux already includes a cal utility with Monday as the start of the week */ -}}
{{- else if not $archlinux }}
# Make cal display the week numbers and Monday as the start of the week
fn cal {|@a| ncal -bM -w $@a }
{{- end }}
# List zombie processes
fn zombie {
  ps -eo state,ppid | re:awk {|line type pid| use str; if (str:has-prefix $type 'Z') { put $pid } } | try { ps -f {{ if eq .chezmoi.os "linux" }}--ppid{{ else }}-o ppid{{ end }} (all) } catch _ { }
}
# Current UNIX timestamp in seconds
fn ts { date +%s }
{{- if or (eq .chezmoi.os "linux") (eq .chezmoi.os "android") (and (eq .chezmoi.os "windows") (lookPath "date")) }}
# Current UNIX timestamp in milliseconds
fn tsms { str:split '' (date +%s%N) | take 13 | str:join '' }
# Current UNIX timestamp in nanoseconds
fn tsns { date +%s%N }
{{- end }}
{{- if eq .chezmoi.os "darwin" }}
# Flush the macOS DNS cache
fn flushdns { sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder }
{{- end }}
# AWS
if (has-external aws) {
  # List the AWS Lambda functions
  fn lambdalist {
    aws --output json lambda list-functions |
      from-json |
      each {|result| put $result[Functions] } |
      all (one) |
      each {|f| put $f[FunctionName] }
  }
  edit:add-var lambdalist~ $lambdalist~
}
# Python
fn pipenv2requirements {
  var default = (cat Pipfile.lock | from-json)[default]
  keys $default | each {|k|
    echo &sep='' $k $default[$k][version]
  }
}
# PlantUML
if (has-external plantuml) {
  # Generate a SVG file using PlantUML
  fn plantuml-svg {|@a| plantuml -tsvg $@a }
  edit:add-var plantuml-svg~ $plantuml-svg~
  # Generate a PNG file with a DPI of 300 using PlantUML
  fn plantuml-png {|@a| plantuml -tpng -Sdpi=300 $@a }
  edit:add-var plantuml-png~ $plantuml-png~
  # Generate a PDF file using PlantUML
  fn plantuml-pdf {|@a| plantuml -tpdf $@a }
  edit:add-var plantuml-pdf~ $plantuml-pdf~
}
# DBus
if (has-external dbus-send) {
  # Get the PID of the currently running DBus Secret Service daemon
  fn secretservicepid {
    dbus-send --session --print-reply=literal --dest=org.freedesktop.DBus / org.freedesktop.DBus.GetConnectionUnixProcessID string:org.freedesktop.secrets
  }
  edit:add-var secretservicepid~ $secretservicepid~

  # Display the QuodLibet play time
  fn quodplaytime {
    dbus-send --session --print-reply=literal --dest=net.sacredchao.QuodLibet /net/sacredchao/QuodLibet net.sacredchao.QuodLibet.GetPosition | awk '{print $2 / 1000}'
  }
  edit:add-var quodplaytime~ $quodplaytime~
}
# SSH key generation
if (has-external ssh-keygen) {
  fn ssh-keygen-rsa { ssh-keygen -t rsa -b 4096 }
  edit:add-var ssh-keygen-rsa~ $ssh-keygen-rsa~
  fn ssh-keygen-ed25519 { ssh-keygen -t ed25519 }
  edit:add-var ssh-keygen-ed25519~ $ssh-keygen-ed25519~
}
if (has-external flac) {
  # Reencode FLAC files in the current directory with the highest compression settings
  fn flacreencodef {
    put **[type:regular].flac | peach {|file|
      flac --verify --best --decode-through-errors --preserve-modtime -e -p -f $file
    }
  }
  edit:add-var flacreencodef~ $flacreencodef~

  if (has-external metaflac) {
    # Reencode FLAC files in the current directory with the highest compression settings if it was encoded with a different version of FLAC
    fn flacreencode {
      var flac_version = (str:split ' ' (flac --version) | drop 1 | take 1)

      put **[type:regular].flac | peach {|file|
        if (not (re:match 'libFLAC '$flac_version (metaflac --show-vendor-tag $file))) {
          flac --verify --best --decode-through-errors --preserve-modtime -e -p -f $file
        }
      }
    }
    edit:add-var flacreencode~ $flacreencode~
  }
}
{{ range $i, $cmd := list "mkvmerge" "ffmpeg" }}
{{ if eq $i 0 }}if{{ else }}elif{{ end }} (has-external {{ $cmd }}) {
  # Remux MTS and M2TS files to MKV"
  fn mpeg2mkv {|&clean=$false|
    for file [**[type:regular].ts **[type:regular].m2t **[type:regular].m2ts] {
      var mkv = re:replace (path:ext $file)'$' .mkv $file
{{ if eq $cmd "mkvmerge" }}
      mkvmerge -o $mkv $f
{{- else if eq $cmd "ffmpeg" }}
      ffmpeg -i $f -scodec copy -acodec copy -vcodec copy -f matroska $mkv
{{- end }}

      if ($clean) {
        rm -f $f
      }

      if (has-external mkclean) {
        var clean_mkv = re:replace (path:ext $file)'$' .clean.mkv $file

        mkclean $mkv $clean_mkv; rm -f $mkv; mv $clean_mkv $mkv
      }
  }
{{- end }}
}
if (has-external pwsh) {
  # Start PowerShell without displaying the copyright banner
  fn pwsh {|@a| e:pwsh -NoLogo $@a }
  edit:add-var pwsh~ $pwsh~
}
{{- if $archlinux }}
if (has-external paru) {
  # Call paru while skipping checksums and PGP checks
  fn paruignore {|@a| paru --mflags "--skipchecksums --skippgpcheck" $@a }
  edit:add-var paruignore~ $paruignore~
}
{{- end }}

{{- if .steamos }}

# SteamOS

fn vim {|@a| flatpak run org.vim.Vim $@a }
fn vi {|@a| vim $@a }
fn gvim {|@a| flatpak run org.vim.Vim -g $@a }
fn nvim {|@a| flatpak run io.neovim.nvim $@a }
fn code {|@a| flatpak run com.visualstudio.code $@a }

if (path:is-dir $E:HOME'/.local/podman/bin') {
  set paths = [$E:HOME'/.local/podman/bin' $@paths]
}
{{- end }}

# Custom functions
#------------------------------------------------------------------------------
# Create a directory and enter it
fn mkcd {|dir|
  mkdir -p $dir
  cd $dir
}

if (has-external chezmoi) {
  # Change directory to the chezmoi folder without creating a subshell
  fn chezmoicd {
    cd (chezmoi source-path)
  }
  edit:add-var chezmoicd~ $chezmoicd~
}

# Check if a JPEG-XL file was losslessly created from a JPEG file
fn jxl_is_lossless_jpeg {|file|
  if (or (not (path:is-regular &follow-symlink=$true $file)) (not (re:match '.jxl$' $file))) {
    fail 'The argument needs to be a JPEG-XL file'
  }

  # https://github.com/libjxl/libjxl/blob/main/doc/format_overview.md#jpeg-bitstream-reconstruction-data
  head -c 64 $file | slurp | each {|contents| re:match 'jbrd' $contents }
}

{{- range list "docker" "podman" }}

if (has-external {{ . }}) {
  # Cleanup {{ . | title }} dangling images, exited containers, unused networks and build cache
  fn {{ . }}cleanup {
    {{ . }} system prune -f
  }
  edit:add-var {{ . }}cleanup~ ${{ . }}cleanup~

  # Delete all {{ . | title }} images, containers, networks, volumes and build cache
  fn {{ . }}nuke {
    {{ . }} ps -a -q | each {|container| {{ . }} rm -f $container }

    {{ . }} system prune -a --volumes -f
  }
  edit:add-var {{ . }}nuke~ ${{ . }}nuke~
}
{{- end }}

# Increment a version number
# Usage:
# echo "1.2.3" | inc_version 3
# 1.2.4
# echo "1.2.3" | inc_version 2
# 1.3.0
# echo "1.2.3" | inc_version 1
# 2.0.0
fn inc_version {|version|
  awk -F. -vOFS=. '{ $ver++; while(ver++<NF) $ver=0; print $0 }' ver=$version
}

# Write an ISO image to a device
# Usage: write_iso ISO DEVICE
fn write_iso {|file device|
  if (or (not (path:is-regular &follow-symlink=$true $file)) (not (re:match '.iso$' $file))) {
    fail 'The first argument needs to be an ISO file'
  }
  if (or (not (path:is-regular &follow-symlink=$true $device)) (not (re:match '^/dev/sd' $device))) {
    fail 'The second argument needs to be a device'
  }

  sudo dd if=$file of=$device bs=4{{ if eq .chezmoi.os "linux" }}M{{ else }}m{{ end }} conv=fdatasync status=progress
}

if (has-external tsh) {
  # Login to Teleport
  fn tshl {
    if (and (not-eq $E:TELEPORT_PROXY '') ^
            (not-eq $E:TELEPORT_USER '') ^
            (not (path:is-regular &follow-symlink=$true $E:HOME"/.tsh/"(str:split ':' $E:TELEPORT_PROXY | take 1)".yaml"))) {
      tsh login
    }

    tsh kube login --all
  }
  edit:add-var tshl~ $tshl~
}

if (has-external git) {
  fn gitc {|diff unit @a|
    tmp E:LC_ALL = C

{{- if or (eq .chezmoi.os "linux") (eq .chezmoi.os "windows") (eq .chezmoi.os "android") }}
    var date
    if (str:has-prefix $diff '-') {
      set date = (date -d (str:trim-prefix $diff '-')' '$unit' ago')
    } else {
      set date = (date -d $diff' '$unit' ago')
    }
{{- else }}
    if (has-value [second seconds] $unit) {
      set unit = 'S'
    } elif (has-value [minute minutes] $unit) {
      set unit = 'M'
    } elif (has-value [hour hours] $unit) {
      set unit = 'H'
    } elif (has-value [day days] $unit) {
      set unit = 'd'
    } elif (has-value [week weeks] $unit) {
      set unit = 'w'
    } elif (has-value [month months] $unit) {
      set unit = 'm'
    } elif (has-value [year years] $unit) {
      set unit = 'y'
    } else {
      fail 'Invalid unit'
    }

    if (not (str:has-prefix $diff '-')) {
      set diff = '+'$diff
    }

    var date = (date -v$diff$unit)
{{- end }}

    if (has-value $a '--amend') {
      tmp E:GIT_COMMITTER_DATE = $date
      # When amending a commit, GIT_AUTHOR_DATE is ignored in favor of the --date option
      git commit --date $date $@a
    } else {
      tmp E:GIT_AUTHOR_DATE = $date
      tmp E:GIT_COMMITTER_DATE = $date
      git commit $@a
    }
  }

  edit:add-var gitc~ $gitc~
}

# CentOS only
# Use Vim with system clipboard support if installed
if (and (path:is-regular &follow-symlink=$true /usr/bin/vimx) ^
        (not (path:is-regular &follow-symlink=$true /usr/local/bin/vim))) {
  fn vim {|@a| /usr/bin/vimx $@a }
  edit:add-var vim~ $vim~
}

# Haskell
#------------------------------------------------------------------------------
if (path:is-dir $E:HOME'/.cabal/bin') {
  set paths = [$E:HOME'/.cabal/bin' $@paths]
}
if (has-external ghc) {
  fn ghc-sandbox {|@a| ghc -no-user-package-db -package-db .cabal-sandbox/*-packages.conf.d $@a }
  edit:add-var ghc-sandbox~ $ghc-sandbox~
}
if (has-external ghci) {
  fn ghci-sandbox {|@a| ghci -no-user-package-db -package-db .cabal-sandbox/*-packages.conf.d $@a }
  edit:add-var ghci-sandbox~ $ghci-sandbox~
}
if (has-external runhaskell) {
  fn runhaskell-sandbox {|@a| runhaskell -no-user-package-db -package-db .cabal-sandbox/*-packages.conf.d $@a }
  edit:add-var runhaskell-sandbox~ $runhaskell-sandbox~
}

# Go
#------------------------------------------------------------------------------
if (has-external go) {
  # go build and strip the debugging information (DWARF tables)
  fn gor {|@a| go build -ldflags='-s -w' $@a }
  edit:add-var gor~ $gor~

  var gopath = (go env GOPATH 2>{{ if eq .chezmoi.os "windows" }}NUL{{ else }}/dev/null{{ end }})
  if (not-eq $gopath '') {
    set paths = [$gopath"/bin" $@paths]
  }
}

# Rust
#------------------------------------------------------------------------------
if (has-external rustup) {
  fn rustbook { rustup docs --book }
  edit:add-var rustbook~ $rustbook~
}
if (path:is-dir $E:HOME'/.cargo/bin') {
  set paths = [$E:HOME'/.cargo/bin' $@paths]
}

# Ruby
#------------------------------------------------------------------------------
if (path:is-dir $E:HOME'/.rvm/bin') {
  set paths = [$E:HOME'/.rvm/bin' $@paths]
}

# Prompt
#------------------------------------------------------------------------------
if (has-external starship) {
  eval (starship init elvish)
} else {
  # Default prompt:
  # set edit:prompt = { tilde-abbr $pwd; put '> ' }
  # Default right prompt:
  # set edit:rprompt = (constantly (styled (whoami)@(hostname) inverse))
  set edit:prompt = {
    var user_char = '$'
    # https://fishshell.com/docs/current/cmds/fish_is_root_user.html
    if (has-value [root toor Administrator] $E:USER) {
      set user_char = '#'
    }

    styled-segment (whoami) &fg-color=green &bold=$true
    styled '@' bold
    styled-segment (hostname) &fg-color=blue &bold=$true
    put ' '
    styled-segment (tilde-abbr $pwd) &fg-color=yellow &bold=$true
    put ' '$user_char' '
  }
  set edit:rprompt = { }
}

# Check if the paths in $PATH actually exist
each {|p|
  if (not (path:is-dir &follow-symlink $p)) {
    echo (styled "Warning: directory "$p" in $paths no longer exists." red)
  }
} $paths
