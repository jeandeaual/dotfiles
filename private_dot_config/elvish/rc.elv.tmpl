{{- $archlinux := false -}}
{{- if eq .chezmoi.os "linux" -}}
{{-   if or (eq .chezmoi.osRelease.id "arch") (eq (index .chezmoi.osRelease "idLike") "arch") -}}
{{-     $archlinux = true -}}
{{-   end -}}
{{- end -}}

use re
use readline-binding
use path
use str
use epm

epm:install &silent-if-installed ^
  github.com/zzamboni/elvish-modules

{{ if eq .chezmoi.os "darwin" -}}
use github.com/zzamboni/elvish-modules/iterm2

iterm2:init
set edit:insert:binding[Ctrl-l] = $iterm2:clear-screen~
{{- end }}

use interactive

# Arrange for [Alt-e] and [Meta-e] to edit the current command buffer using the
# prefered external editor
set edit:insert:binding[Alt-e] = $interactive:external_edit_command~
set edit:insert:binding[Meta-e] = $interactive:external_edit_command~

try {
    use work
} except {
    # The work module might not be available on some machines
}

var config_path = $E:HOME'/.config'
if (not-eq $E:XDG_CONFIG_HOME '') {
  set config_path = $E:XDG_CONFIG_HOME
}

# Environment variables
#------------------------------------------------------------------------------
set E:VISUAL = 'gvim'
# Preferred editor for local and remote sessions
if (eq $E:SSH_CONNECTION '') {
  set E:EDITOR = 'vim'
} else {
  set E:EDITOR = 'gvim'
}
set E:SYSTEMD_EDITOR = $E:EDITOR
set E:FCEDIT = $E:EDITOR
set E:SVN_EDITOR = $E:EDITOR
set E:PAGER = 'less'
set E:LESS = '--tabs=4 --no-init --LONG-PROMPT --ignore-case --quit-if-one-screen --RAW-CONTROL-CHARS'
set E:WWW_BROWSER = 'w3m'
set E:DOWNLOADER = 'wget -S'
if (path:is-regular &follow-symlink=$true $config_path'/ripgrep/ripgreprc') {
  set E:RIPGREP_CONFIG_PATH = $config_path'/ripgrep/ripgreprc'
}
if (path:is-dir /usr/local/man) {
  if (eq E:MANPATH '') {
    set E:MANPATH = /usr/local/man
  } else {
    set E:MANPATH = (str:join ':' [/usr/local/man $E:MANPATH])
  }
}
# Add ~/.local/bin to the PATH if it exists
if (path:is-dir $E:HOME"/.local/bin") {
  set paths = [$E:HOME"/.local/bin" $@paths]
}

# Aliases
#------------------------------------------------------------------------------
{{- if eq .chezmoi.os "darwin" }}
fn o [@a]{ open $@a }
{{- else }}
if (has-external xdg-open) {
  fn o [@a]{ xdg-open $@a }
}
{{- end }}
fn cp [@a]{ e:cp -v $@a }
fn mv [@a]{ e:mv -v $@a }
fn rm [@a]{ e:rm -v $@a }
{{- if eq .chezmoi.os "darwin" }}
fn ls [@a]{ e:ls -G $@a }
{{- else }}
fn ls [@a]{ e:ls --color=auto --group-directories-first $@a }
{{- end }}
fn ll [@a]{ e:ls -Alh $@a }
fn du [@a]{ e:du -h $@a }
fn df [@a]{ e:df -Th $@a }
fn gzip [@a]{ e:gzip -v9N $@a }
fn zip [@a]{ e:zip -9 -r $@a }
fn 7z [@a]{ e:7z a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on $@a }
fn j [@a]{ jobs -l $@a }
# Show which process is using which port
fn ports { sudo lsof +M -i4 -n -P }
# Force tmux to assume the terminal supports 256 colours
fn tmux [@a]{ e:tmux -2 $@a }
fn em [@a]{ emacs $@a }
if (has-external emacsclient) {
  # Open a new Emacs frame
  fn emc [@a]{ emacsclient -n -c -a "" $@a }
  # Open an Emacs frame in the current TTY
  fn emw [@a]{ emacsclient -n -w -a "" $@a }
}

# Get the external IP address
fn wip {
  dig -4 +short myip.opendns.com A @resolver1.opendns.com
  # dig -4 +short o-o.myaddr.l.google.com TXT @ns1.google.com | cut -d '"' -f 2
}
fn wip6 {
  dig -6 +short myip.opendns.com AAAA @resolver1.ipv6-sandbox.opendns.com
  # dig -6 +short o-o.myaddr.l.google.com TXT @ns1.google.com | cut -d '"' -f 2
}
# Delete all executables from the current directory
fn rmbin { find . -maxdepth 1 -perm /111 -type f -exec rm -v '{}' ';' }
{{- if and (ne .chezmoi.os "windows") (ne .chezmoi.os "darwin") }}
# Find all the .desktop files installed on the system
fn finddesktop { try { find {/usr/{,local/},$E:HOME/.local/}share/applications -type f 2>/dev/null } except _ { } }
{{- end }}
{{- if and (ne .chezmoi.os "windows") (ne .chezmoi.os "darwin") (ne .chezmoi.os "android") (not .wsl) }}
# Ask GNOME Shell to restart itself through dbus
if (has-external dbus-send) {
  fn restartgnome { dbus-send --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'global.reexec_self()' }
}
{{- end }}
{{- if ne .chezmoi.os "darwin" }}
# Mimic the OS X commands
fn pbcopy { xclip -selection clipboard }
fn pbpaste { xclip -selection clipboard -o }
# Show a QR code with the clipboard's content
if (and (has-external xclip) (has-external qrencode)) {
  fn qr { xclip -selection clipboard -o | qrencode --size=10 -o - | feh - }
}
if (has-external ip) {
  fn ips {
    for gw (ip route list to 0/0 | awk '{print $3}') {
      ip route get to $gw | awk '/src/ {print $5}'
    }
  }
}
{{- end }}
# Mozc aliases
if (has-external /usr/lib/mozc/mozc_tool) {
  fn mozc-config { /usr/lib/mozc/mozc_tool --mode=config_dialog }
  fn mozc-pad { /usr/lib/mozc/mozc_tool --mode=hand_writing }
  fn mozc-register { /usr/lib/mozc/mozc_tool --mode=word_register_dialog }
  fn mozc-dict { /usr/lib/mozc/mozc_tool --mode=dictionary_tool }
}
{{- /* ArchLinux already includes a cal utility with Monday as the start of the week */ -}}
{{- if not $archlinux }}
# Make cal display Monday as the start of the week
fn cal [@a]{ ncal -bM -w $@a }
{{- end }}
# List zombie processes
fn zombie {
  ps -eo state,ppid | eawk [line type pid]{ use str; if (str:has-prefix $type 'Z') { put $pid } } | try { ps -f {{ if eq .chezmoi.os "linux" }}--ppid{{ else }}-o ppid{{ end }} (all) } except _ { }
}
# Current UNIX timestamp in seconds
fn ts { date +%s }
# Current UNIX timestamp in milliseconds
fn tsms { date +%s%N | cut -b1-13 }
# Current UNIX timestamp in nanoseconds
fn tsns { date +%s%N }
# AWS
if (has-external aws) {
  fn lambdalist {
    aws --output json lambda list-functions |
      from-json |
      each [result]{ put $result[Functions] } |
      all (one) |
      each [f]{ put $f[FunctionName] }
  }
}
# Python
fn pipenv2requirements {
  var pipfile = (cat Pipfile.lock | from-json)
  var default = $pipfile[default]
  keys $default | each [k]{
    echo &sep='' $k $default[$k][version]
  }
}
# DBus
if (has-external dbus-send) {
  # Get the PID of the currently running DBus Secret Service daemon
  fn secretservicepid {
    dbus-send --session --print-reply=literal --dest=org.freedesktop.DBus / org.freedesktop.DBus.GetConnectionUnixProcessID string:org.freedesktop.secrets
  }
  # Display the QuodLibet play time
  fn quodplaytime {
    dbus-send --session --print-reply=literal --dest=net.sacredchao.QuodLibet /net/sacredchao/QuodLibet net.sacredchao.QuodLibet.GetPosition | awk '{print $2 / 1000}'
  }
}
# SSH key generation
if (has-external ssh-keygen) {
  fn ssh-keygen-rsa { ssh-keygen -t rsa -b 4096 }
  fn ssh-keygen-ed25519 { ssh-keygen -t ed25519 }
}
if (has-external flac) {
  # Reencode FLAC files with the highest compression settings
  fn flacreencode { put **[type:regular].flac | peach [file]{ flac --verify --best --decode-through-errors --preserve-modtime -e -p -f $file } }
}
if (has-external pwsh) {
  # Start PowerShell without displaying the copyright banner
  fn pwsh [@a]{ e:pwsh -NoLogo $@a }
}
{{- if $archlinux }}
if (has-external paru) {
  # Call paru while skipping checksums and PGP checks
  fn paruignore [@a]{ paru --mflags "--skipchecksums --skippgpcheck" $@a }
}
{{- end }}

# Custom functions
#------------------------------------------------------------------------------
# Create a directory and enter it
fn mkcd [dir]{
  mkdir -p $dir
  cd $dir
}

if (has-external chezmoi) {
  # Change directory to the chezmoi folder without creating a subshell
  fn chezmoicd {
    cd (chezmoi source-path)
  }
}

# Increment a version number
# Usage:
# echo "1.2.3" | inc_version 3
# 1.2.4
# echo "1.2.3" | inc_version 2
# 1.3.0
# echo "1.2.3" | inc_version 1
# 2.0.0
fn inc_version [version]{
  awk -F. -vOFS=. '{ $ver++; while(ver++<NF) $ver=0; print $0 }' ver=$version
}

# Write an ISO image to a device
# Usage: write_iso ISO DEVICE
fn write_iso [file device]{
  if (or (not (path:is-regular &follow-symlink=$true $file)) (not (re:match '.iso$' $file))) {
    fail "The first argument needs to be an ISO file"
  }
  if (or (not (path:is-regular &follow-symlink=$true $device)) (not (re:match '^/dev/sd' $device))) {
    fail "The second argument needs to be a device"
  }

  sudo dd if=$file of=$device bs=4{{ if eq .chezmoi.os "linux" }}M{{ else }}m{{ end }} conv=fdatasync status=progress
}

if (has-external tsh) {
  # Login to Teleport
  fn tshl [env]{
    if (not (has-value [prod stg dev infra sci] $env)) {
      set env = dev
    }

    if (eq $E:SSH_CONNECTION '') {
      if (and (not-eq $E:TELEPORT_PROXY '')
                (not-eq $E:TELEPORT_USER '')
                (path:is-regular &follow-symlink=$true $E:HOME"/.tsh/"(str:split ':' $E:TELEPORT_PROXY | take 1)".yaml")) {
        tsh login
      }

      tsh kube login $env
    }
  }
}

# CentOS only
# Use Vim with system clipboard support if installed
if (and (path:is-regular &follow-symlink=$true /usr/bin/vimx) ^
        (not (path:is-regular &follow-symlink=$true /usr/local/bin/vim))) {
  fn vim [@a]{ /usr/bin/vimx $@a }
}

# Haskell
#------------------------------------------------------------------------------
if (path:is-dir $E:HOME"/.cabal/bin") {
  set paths = [$E:HOME"/.cabal/bin" $@paths]
}
if (has-external ghc) {
  fn ghc-sandbox [@a]{ ghc -no-user-package-db -package-db .cabal-sandbox/*-packages.conf.d $@a }
}
if (has-external ghci) {
  fn ghci-sandbox [@a]{ ghci -no-user-package-db -package-db .cabal-sandbox/*-packages.conf.d $@a }
}
if (has-external runhaskell) {
  fn runhaskell-sandbox [@a]{ runhaskell -no-user-package-db -package-db .cabal-sandbox/*-packages.conf.d $@a }
}

# Go
#------------------------------------------------------------------------------
if (has-external go) {
  # go build and strip the debugging information (DWARF tables)
  fn gor [@a]{ go build -ldflags='-s -w' $@a }

  var gopath = (go env GOPATH 2>/dev/null)
  if (not-eq $gopath '') {
    set paths = [$gopath"/bin" $@paths]
  }
}

# Rust
#------------------------------------------------------------------------------
if (has-external rustup) {
  fn rustbook { rustup docs --book }
}
if (path:is-dir $E:HOME"/.cargo/bin") {
  set paths = [$E:HOME"/.cargo/bin" $@paths]
}

# Ruby
#------------------------------------------------------------------------------
if (path:is-dir $E:HOME"/.rvm/bin") {
  set paths = [$E:HOME"/.rvm/bin" $@paths]
}

# Prompt
#------------------------------------------------------------------------------
if (has-external starship) {
  eval (starship init elvish)
} else {
  # Default prompt:
  # set edit:prompt = { tilde-abbr $pwd; put '> ' }
  # Default right prompt:
  # set edit:rprompt = (constantly (styled (whoami)@(hostname) inverse))
  set edit:prompt = {
    var user_char = '$'
    # https://fishshell.com/docs/current/cmds/fish_is_root_user.html
    if (has-value [root toor Administrator] $E:USER) {
      set user_char = '#'
    }

    styled-segment (whoami) &fg-color=green &bold=$true
    styled '@' bold
    styled-segment (hostname) &fg-color=blue &bold=$true
    put ' '
    styled-segment (tilde-abbr $pwd) &fg-color=yellow &bold=$true
    put ' '$user_char' '
  }
  set edit:rprompt = { }
}

# Check if the paths in $PATH actually exist
each [p]{
  if (not (path:is-dir &follow-symlink $p)) {
    echo (styled "Warning: directory "$p" in $paths no longer exists." red)
  }
} $paths
