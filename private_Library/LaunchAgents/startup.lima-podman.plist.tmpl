{{- if and .work (lookPath "lima") (eq .dockercmd "podman") -}}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Label</key>
	<string>startup.lima-podman</string>
	<key>RunAtLoad</key>
	<true/>
	<key>AbandonProcessGroup</key>
	<true/>
	<key>EnvironmentVariables</key>
	<dict>
		<key>PATH</key>
		<string>/usr/local/bin:/opt/homebrew/bin:/usr/bin:/bin:/usr/sbin:/sbin</string>
	</dict>
	<key>ProgramArguments</key>
	<array>
		<string>sh</string>
		<string>-c</string>
		<!-- `limactl create podman` needs to be run first to create the podman VM -->
		<string>limactl start podman && launchctl setenv LIMA_INSTANCE podman && export PODMAN_SOCK="$(limactl list podman --format 'unix://{{"{{"}}.Dir{{"}}"}}/sock/podman.sock')" && launchctl setenv CONTAINER_HOST "${PODMAN_SOCK}" && launchctl setenv DOCKER_HOST "${PODMAN_SOCK}"</string>
	</array>
	<!-- <key>StandardErrorPath</key> -->
	<!-- <string>/tmp/startup.podman.err</string> -->
	<!-- <key>StandardOutPath</key> -->
	<!-- <string>/tmp/startup.podman.out</string> -->
</dict>
</plist>
{{ end -}}
