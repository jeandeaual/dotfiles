# Let dein manage itself
[[plugins]]
repo = 'Shougo/dein.vim'

# Colorscheme
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  let g:hybrid_custom_term_colors = 1

  if &background !=# 'dark'
    set background=dark
  endif

  colorscheme hybrid
'''

# Additional text objects
[[plugins]]
repo = 'wellle/targets.vim'

# Languages

# Objective-C
[[plugins]]
repo = 'b4winckler/vim-objc'

# Windows PowerShell
[[plugins]]
repo = 'PProvost/vim-ps1'

# CSV
[[plugins]]
repo = 'chrisbra/csv.vim'

# Pandoc
[[plugins]]
repo = 'vim-pandoc/vim-pandoc'
if = 'has("python")'
hook_add = '''
  " Unfold level 1 headers when opening a file
  let g:pandoc#folding#level = 1
'''

[[plugins]]
repo = 'vim-pandoc/vim-pandoc-syntax'

# Textile
[[plugins]]
repo = 'timcharper/textile.vim'

# HTML5
[[plugins]]
repo = 'rstacruz/sparkup'
rtp = 'vim'
hook_add = '''
  let g:sparkupExecuteMapping = '<C-S>'
'''

# Highlight access logs of Apache, nginx, etc.
[[plugins]]
repo = 'vim-scripts/httplog'

# Potion
[[plugins]]
repo = 'tapichu/potion.vim'

# Rust
[[plugins]]
repo = 'rust-lang/rust.vim'

# Android
# Temporarily disabled due to conflict with vim-java on g:gradle_path
# [[plugins]]
# repo = 'hsanson/vim-android'

# PostgreSQL
[[plugins]]
repo = 'exu/pgsql.vim'
hook_post_source = '''
  " Make pgsql.vim the default for SQL syntax
  let g:sql_type_default = 'pgsql'
'''

# Apache VTL
[[plugins]]
repo = 'lepture/vim-velocity'

# nginx
[[plugins]]
repo = 'fatih/vim-nginx'

# gitignore
[[plugings]]
repo = 'gisphm/vim-gitignore'

# PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'weirongxu/plantuml-previewer.vim'

# Meson
[[plugins]]
repo = 'stfl/meson.vim'

# Kubernetes
[[plugins]]
repo = 'andrewstuart/vim-kubernetes'
depends = ['vim-go']

# Filetype detection by the shebang line
[[plugins]]
repo = 'vitalk/vim-shebang'

# Rainbow parentheses plugin
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_conf = {
  \  'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
  \  'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
  \  'operators': '_,_',
  \  'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
  \  'separately': {
  \    '*': {},
  \    'tex': {
  \      'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
  \    },
  \    'lisp': {
  \      'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
  \    },
  \    'vim': {
  \      'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
  \    },
  \    'html': {
  \      'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
  \    },
  \    'css': 0,
  \  }
  \}
'''

# Go to Terminal or File manager
# gof opens the file manager at the directory of the file you are currently
# editing.
# got opens the terminal at the directory of the file you are currently editing.
[[plugins]]
repo = 'justinmk/vim-gtfo'

# Plugin to toggle, display and navigate marks
[[plugins]]
repo = 'kshenoy/vim-signature'
if = 'has("signs")'

# Git wrapper
[[plugins]]
repo = 'tpope/vim-fugitive'

# Change the font size using <leader><leader>+ and <leader><leader>-
[[plugins]]
repo = 'drmikehenry/vim-fontsize'
hook_add = '''
  " Use Ctrl + mouse wheel to change the font size
  nmap <C-ScrollWheelUp>   <Plug>FontsizeInc
  nmap <C-ScrollWheelDown> <Plug>FontsizeDec

  " Restore the default mappings that are disabled if another mapping is set
  " TODO: Creating a second mapping doesn't seem to work
  nmap <Leader><Leader>+ <Plug>FontsizeInc
  nmap <Leader><Leader>- <Plug>FontsizeDec
'''

# Defaults everyone can agree on
[[plugins]]
repo = 'tpope/vim-sensible'
# Quoting/parenthesizing made simple
[[plugins]]
repo = 'tpope/vim-surround'
[[plugins]]
repo = 'tpope/vim-commentary'
[[plugins]]
repo = 'tpope/vim-repeat'
[[plugins]]
repo = 'tpope/vim-speeddating'
[[plugins]]
repo = 'tpope/vim-unimpaired'
[[plugins]]
repo = 'tpope/vim-dispatch'
# Unicode character metadata with ga
[[plugins]]
repo = 'tpope/vim-characterize'
# Wisely add "end" in ruby, endfunction/endif/more in vimscript, etc.
[[plugins]]
repo = 'tpope/vim-endwise'
# Easily search for, substitute, and abbreviate multiple variants of a word
# Also include case coercion commands (crm, crc, crs, cru)
[[plugins]]
repo = 'tpope/vim-abolish'

# A simple, easy-to-use Vim alignment plugin
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap <Leader>a <Plug>(EasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap <Leader>a <Plug>(EasyAlign)
'''

# Make gvim-only colorschemes work transparently in terminal Vim
[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

# Some things to improve key support in rxvt
[[plugins]]
repo = 'nacitar/terminalkeys.vim'

# Syntax checking hacks for Vim
[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
  let g:syntastic_enable_perl_checker      = 1 " Disabled by default
  let g:syntastic_perl_checkers            = ['perl', 'perlcritic', 'podchecker']
  let g:syntastic_erlang_checkers          = ['syntaxerl', 'escript']
  let g:syntastic_go_checkers              = ['go', 'gofmt', 'govet', 'gometalinter']
  let g:syntastic_go_gometalinter_args     = '--dealine 10s'
  let g:syntastic_html_checkers            = ['validator', 'htmlhint', 'tidy', 'jshint']
  let g:syntastic_html_validator_parser    = 'html5'
  let g:syntastic_javascript_checkers      = ['eslint', 'jshint', 'jscs']
  let g:syntastic_python_checkers          = ['python', 'flake8', 'pep8', 'pylama', 'pylint', 'mypy']
  let g:syntastic_ruby_checkers            = ['mri', 'rubocop', 'rubylint']
  let g:syntastic_rust_checkers            = ['rustc']
  let g:syntastic_sh_checkers              = ['sh', 'bashate', 'shellcheck']
  let g:syntastic_lua_checkers             = ['luac', 'luacheck']
  let g:syntastic_tex_checkers             = ['chktex', 'proselint']
  let g:syntastic_markdown_checkers        = ['mdl', 'proselint']
  let g:syntastic_pandoc_checkers          = ['mdl', 'proselint']
  let g:syntastic_cpp_compiler_options     = ' -std=c++11'
  let g:syntastic_php_phpcs_args           = '--standard=Alexis'
  let g:syntastic_php_phpcs_args           = '--standard=Alexis'
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list            = 1
  let g:syntastic_check_on_open            = 1
  let g:syntastic_check_on_wq              = 0
'''

# Provides insert mode auto-completion for quotes, parens, brackets, etc.
[[plugins]]
repo = 'Raimondi/delimitMate'

# Lean & mean status/tabline for Vim that's light as air
[[plugins]]
repo = 'vim-airline/vim-airline'
if = 'has("statusline")'
hook_add = '''
  let g:airline_theme = 'bubblegum'
  let g:airline_powerline_fonts = 1
  "let g:airline_section_z = 'î‚¡%#__accent_bold#%l/%L%#__restore__#:%3c'
  let g:airline_section_z = '%#__accent_bold#%l/%L%#__restore__#:%3c'
  " The separator used on the left side
  let g:airline_left_sep = ''
  " The separator used on the right side
  let g:airline_right_sep = ''

  " Enable the list of buffers
  let g:airline#extensions#tabline#enabled = 1

  " Show just the filename
  let g:airline#extensions#tabline#fnamemod = ':t'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = ['vim-airline']

# Visually display indent levels in code
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_char = '|'
'''

# For C++ auto-completion
[[plugins]]
repo = 'osyo-manga/vim-reunions'
[[plugins]]
repo = 'osyo-manga/vim-marching'

# clang-format support
[[plugins]]
repo = 'rhysd/vim-clang-format'

# For VimL lint
[[plugins]]
repo = 'ynkdir/vim-vimlparser'

[[plugins]]
repo = 'hashivim/vim-hashicorp-tools.git'

[[plugins]]
repo = 'junegunn/goyo.vim'
hook_add = '''
  " Default: 80
  let g:goyo_width = 120
  " Default: 85%
  let g:goyo_height = 90
  " Default: 0
  let g:goyo_linenr = 0

  nnoremap <M-F11> :Goyo<CR>
'''

[[plugins]]
repo = 'junegunn/limelight.vim'
hook_add = '''
  " Goyo.vim integration for Limelight.vim
  autocmd! User GoyoEnter Limelight
  autocmd! User GoyoLeave Limelight!
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
hook_add = '''
  " Markdown-compatible tables
  let g:table_mode_corner='|'
'''

[[plugins]]
repo = 'mhinz/vim-signify'
if = 'has("signs")'
hook_add = '''
  let g:signify_vcs_list = ['git', 'hg', 'svn', 'bzr']
  let g:signify_realtime = 0
  let g:signify_cursorhold_insert = 1
  let g:signify_cursorhold_normal = 1
  let g:signify_update_on_bufenter = 0
  let g:signify_update_on_focusgained = 1
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'jamessan/vim-gnupg'

# File manipulation

[[plugins]]
repo = 'tpope/vim-vinegar'

# Helper plugin for Neovim GUI commands and functions
[[plugins]]
repo = 'equalsraf/neovim-gui-shim'
if = 'has("nvim")'

# Requires the installation of msgpack-python (pip install msgpack-python)
# and the Neovim Python module (pip install neovim)
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '!has("nvim") && has("python3") && v:version >= 800'

# Edit ZIP files recursively (useful for JAR files)
[[plugins]]
repo = 'vim-scripts/runzip'
