# Languages

# Ruby
[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby']
[[plugins]]
repo = 'rhysd/vim-textobj-ruby'
on_ft = ['ruby']

# Erlang
[[plugins]]
repo = 'vim-erlang/vim-erlang-runtime'
on_ft = ['erlang']
[[plugins]]
repo = 'vim-erlang/vim-erlang-compiler'
on_ft = ['erlang']
[[plugins]]
repo = 'vim-erlang/vim-erlang-omnicomplete'
on_ft = ['erlang']
[[plugins]]
repo = 'vim-erlang/vim-erlang-tags'
on_ft = ['erlang']
[[plugins]]
repo = 'edkolev/erlang-motions.vim'
on_ft = ['erlang']

# Elixir
[[plugins]]
repo = 'elixir-lang/vim-elixir'
on_ft = ['elixir']
[[plugins]]
repo = 'slashmili/alchemist.vim'
on_ft = ['elixir']
[[plugins]]
repo = 'mhinz/vim-mix-format'
on_ft = ['elixir']
hook_source = '''
  " Automatically format on saving.
  "let g:mix_format_on_save = 1
'''

# Haskell
# A collection of vimscripts for Haskell development
[[plugins]]
repo = 'dag/vim2hs'
on_ft = ['haskell']
hook_source = '''
  " Disable concealing of "enumerations": commatized lists like deriving
  " clauses and LANGUAGE pragmas, otherwise collapsed into a single ellipsis
  let g:haskell_conceal_enumerations = 0

  " if s:is_win
  "   " Disable all conceals, including the simple ones like lambda and composition
  "   let g:haskell_conceal = 0
  " else
  "   " Enable "wide conceals" (makes the type colons and function arrows
  "   " display as Unicode)
  "   let g:haskell_conceal_wide = 1
  " endif

  " Enable "wide conceals" (makes the type colons and function arrows
  " display as Unicode)
  "let g:haskell_conceal_wide = 1
'''

# A completion plugin for Haskell, using ghc-mod
[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = ['haskell']

# HTML5
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']

# HAML
[[plugins]]
repo = 'tpope/vim-haml'
on_ft = ['haml']

# CSS3
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css']

# JavaScript
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript']
hook_source = '''
  let g:javascript_plugin_jsdoc = 1
  let g:javascript_plugin_ngdoc = 1
  let g:javascript_plugin_flow = 1

  if has("autocmd")
    augroup filetype_javascript
      autocmd!
      autocmd FileType javascript
            \ setlocal foldmethod=syntax
    augroup END
  endif

  " let g:javascript_conceal_function             = "Æ’"
  " let g:javascript_conceal_null                 = "Ã¸"
  " let g:javascript_conceal_this                 = "@"
  " let g:javascript_conceal_return               = "â‡š"
  " let g:javascript_conceal_undefined            = "Â¿"
  " let g:javascript_conceal_NaN                  = "â„•"
  " let g:javascript_conceal_prototype            = "Â¶"
  " let g:javascript_conceal_static               = "â€¢"
  " let g:javascript_conceal_super                = "Î©"
  " let g:javascript_conceal_arrow_function       = "â‡’"
  " let g:javascript_conceal_noarg_arrow_function = "ðŸž…"
'''

# Various JavaScript libraries (syntax, autocomplete, etc.)
[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = ['javascript']
hook_source = '''
  let g:used_javascript_libs = 'jquery,underscore,backbone,angularjs'
'''

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = ['jsx']
hook_source = '''
  let g:jsx_ext_required = 0
'''

# CoffeeScript
[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffee']

# JSON
[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']

# PHP
[[plugins]]
repo = 'StanAngeloff/php.vim'
on_ft = ['php']
# Automatic folding of PHP functions, classes, PhpDoc, etc.
[[plugins]]
repo = 'rayburgemeestre/phpfolding.vim'
on_ft = ['php']

# Lua
[[plugins]]
repo = 'xolox/vim-lua-ftplugin'
depends = ['vim-misc']
on_ft = ['lua']

# TeX
[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex', 'bib']
hook_source = '''
  if dein#util#_is_windows()
    let g:vimtex_view_general_viewer = 'SumatraPDF'
    let g:vimtex_view_general_options
        \ = '-reuse-instance -forward-search @tex @line @pdf'
    let g:vimtex_view_general_options_latexmk = '-reuse-instance'
  endif
'''

# Clojure
[[plugins]]
repo = 'tpope/vim-fireplace'
on_ft = ['clojure']
[[plugins]]
repo = 'tpope/vim-classpath'
on_ft = ['clojure']
[[plugins]]
repo = 'guns/vim-clojure-static'
on_ft = ['clojure']

# Python
[[plugins]]
repo = 'klen/python-mode'
on_ft = ['python']
hook_source = '''
  let g:pymode_rope = 0
'''

# Java
[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
on_ft = ['java']
hook_source = '''
  if has("autocmd")
    " vim -b : edit binary using xxd-format!
    augroup filetype_java
      autocmd!
      autocmd FileType java setlocal omnifunc=javacomplete#Complete
    augroup END
  endif
'''

# Gradle
[[plugins]]
repo = 'tfnico/vim-gradle'
on_ft = ['gradle']

# C#
[[plugins]]
repo = 'OmniSharp/omnisharp-vim.git'
on_ft = ['cs']

# R
[[plugins]]
repo = 'jcfaria/Vim-R-plugin'
on_ft = ['r']

# TOML
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# Dockerfile
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = ['Dockerfile']

# QML
[[plugins]]
repo = 'peterhoeg/vim-qml.git'
on_ft = ['qml']

# Go
[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_source = '''
  let g:go_fmt_autosave = 0
  let g:go_def_mode = 'gopls'
  let g:go_info_mode = 'gopls'
  if has('autocmd')
    augroup filetype_go
      autocmd!
      autocmd FileType go nmap <Leader>gi <Plug>(go-import)
      autocmd FileType go nmap <Leader>gr <Plug>(go-run)
      autocmd FileType go nmap <Leader>gb <Plug>(go-build)
      autocmd FileType go nmap <Leader>gt <Plug>(go-test)
      autocmd FileType go nmap <Leader>ds <Plug>(go-def-split)
      autocmd FileType go nmap <Leader>dv <Plug>(go-def-vertical)
      autocmd FileType go nmap <Leader>dt <Plug>(go-def-tab)
    augroup END
  endif
'''

[[plugins]]
repo = 'cespare/vim-go-templates'
depends = ['vim-go']
on_ft = ['go']

# Swift
[[plugins]]
repo = 'Keithbsmiley/swift.vim'
on_ft = ['swift']

# XML
[[plugins]]
repo = 'othree/xml.vim'
on_ft = ['html', 'xml']

# SVG
[[plugins]]
repo = 'vim-scripts/svg.vim'
on_ft = ['svg']

# OpenSCAD
[[plugins]]
repo = 'vim-scripts/openscad.vim'
on_ft = ['openscad']

# Kotlin
[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = ['kotlin']

# GraphQL
[[plugins]]
repo = 'jparise/vim-graphql'
on_ft = ['graphql']

# Arduino
[[plugins]]
repo = 'sudar/vim-arduino-syntax'
on_ft = ['arduino']

# Monkey C (Garmin)
[[plugins]]
repo = 'keithluchtel/vim-monkey-c.git'
on_ft = ['monkey-c']

# MTmacro (MapTool)
[[plugins]]
repo = 'rkathey/mtgvim'
on_ft = ['mtmacro', 'mtm']

# Solidity
[[plugins]]
repo = 'tomlion/vim-solidity'
on_ft = ['solidity']

# Vala
[[plugins]]
repo = 'arrufat/vala.vim'
on_ft = ['vala']

# Vue.js
[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']

# Ledger
[[plugins]]
repo = 'ledger/vim-ledger.git'
on_ft = ['ledger']

# Python requirements.txt
[[plugins]]
repo = 'raimon49/requirements.txt.vim'
on_ft = ['requirements']

# MediaWiki
[[plugins]]
repo = 'chikamichi/mediawiki.vim'
on_ft = ['mediawiki']

# VimL
[[plugins]]
repo = 'syngan/vim-vimlint'
depends = ['vim-vimlparser']
on_ft = ['vim']

# Org-mode
[[plugins]]
repo = 'jceb/vim-orgmode'
on_ft = ['org']

# ABNF
[[plugins]]
repo = 'skilstak/vim-abnf-utf8'
on_ft = ['abnf']

# Mercurial wrapper
[[plugins]]
repo = 'phleet/vim-mercenary'
on_cmd =  ['HGblame', 'HGcat', 'HGdiff', 'HGshow']

# Colorize all text in the form #rrggbb or #rgb
[[plugins]]
repo = 'lilydjwg/colorizer'
on_ft = ['css', 'svg']

# Simplifies the transition between multiline and single-line code
[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_cmd =  [ 'SplitjoinJoin', 'SplitjoinSplit' ]

# Multi-language DBGP debugger client (for PHP, Python, Perl, Ruby, etc.)
[[plugins]]
repo = 'joonty/vdebug.git'
on_ft = ['php', 'python', 'perl', 'ruby']
hook_source = '''
  " Vdebug only maps two commands outside of the debugger mode, "run" and
  " "set_breakpoint".
  let g:vdebug_keymap = {
    \   'run' : '<F1>',
    \   'run_to_cursor' : '<F3>',
    \   'step_over' : '<F4>',
    \   'step_into' : '<F5>',
    \   'step_out' : '<F6>',
    \   'close' : '<F7>',
    \   'detach' : '<F8>',
    \   'set_breakpoint' : '<F2>',
    \   'get_context' : '<F11>',
    \   'eval_under_cursor' : '<F12>',
    \   'eval_visual' : '<Leader>e',
    \ }
'''

[[plugins]]
# Vim plug for switching between companion source files (e.g. ".h" and ".cpp")
repo = 'derekwyatt/vim-fswitch'
on_ft = ['c', 'cpp', 'objc']

# Region expanding
[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = [
    '<Plug>(expand_region_expand)',
    '<Plug>(expand_region_shrink)'
]
hook_source = '''
  vmap v <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)
'''

# EditorConfig
[[plugins]]
repo = 'editorconfig/editorconfig-vim'
if = 'has("python")'
on_path = '.*'

# Todo.txt
[[plugins]]
repo = 'freitass/todo.txt-vim'
on_ft = ['todo']

# fish
[[plugins]]
repo = 'khaveesh/vim-fish-syntax'
on_ft = ['fish']

# Elvish
[[plugins]]
repo = 'chlorm/vim-syntax-elvish'
on_ft = ['elvish']

# vimproc
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
if = 'has("python3") && (has("nvim") || v:version >= 800)'
on_cmd = 'Denite'
hook_post_source = '''
  " file_rec
  if executable('pt')
    call denite#custom#var('file_rec', 'command', ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
  endif

  " grep
  if executable('pt')
    call denite#custom#var('grep', 'command', ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden'])
    call denite#custom#var('grep', 'default_opts', [])
    call denite#custom#var('grep', 'recursive_opts', [])
  endif

  call denite#custom#source('file_mru', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
  call denite#custom#source('file_mru', 'converters', ['converter_relative_word'])
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
if = 'has("python3") && (has("nvim") || v:version >= 800)'
depends = ['denite.nvim']
on_path = '.*'

[[plugins]]
repo = 'Shougo/neoyank.vim'
if = 'has("python3") && (has("nvim") || v:version >= 800)'
depends = ['denite.nvim']
on_event = 'TextYankPost'
